import asyncio
import logging
from datetime import datetime, timedelta

from aiogram import types, F, Router
from aiogram.filters import Command, StateFilter
from pydantic import ValidationError

import db
from kb import *
from env import *
from fsm import *

basic_router = Router()
admin_id = [] 


async def send_pdf_file(message: types.Message):
    pdf_file = '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –î–Ω—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π.pdf'
    try:
        file = types.FSInputFile(pdf_file)
        await bot.send_document(chat_id=message.chat.id, document=file)
    except FileNotFoundError:
        logging.error(f'–§–∞–π–ª {pdf_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        await message.answer('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.')
    except ValidationError:
        logging.error(f'–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏')
        await message.answer('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏.')


# –≤—ã–∑–æ–≤, –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è —Å—Ç–∞—Ä—Ç, –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–∫–Ω–æ–ø–∫–∏ - –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç, –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–∞—Ä—Ç) –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –î–û–î–∞
@basic_router.message(Command('start'))
async def commands_start(message: types.Message):
    user_id = message.from_user.id
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    cursor.execute('INSERT INTO user_stat (user_id, timestamp) VALUES (?, ?)', (user_id, timestamp))
    conn.commit()
    await send_pdf_file(message)
    await message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç¬ª, –∫–Ω–æ–ø–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.',
                         reply_markup=startkb)


# –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞
@basic_router.message(Command('restart'))
async def commands_restart(message: types.Message):
    await send_pdf_file(message)
    await message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç¬ª, –∫–Ω–æ–ø–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.',
                         reply_markup=startkb)


# –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∫–∞—Ä—Ç
@basic_router.message(F.text == '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–∞—Ä—Ç üó∫')
async def open_website(message: types.Message):
    user_id = message.from_user.id
    timestampurl = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    cursor.execute('INSERT INTO url (user_id, timestampurl) VALUES (?, ?)', (user_id, timestampurl))
    conn.commit()

    website_url = 'https://mospolynavigation.github.io/dod/'
    await message.answer(f'–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É ‚Üí <a href="{website_url}">¬´–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–∞—Ä—Ç¬ª</a>',
                         disable_web_page_preview=True)


@basic_router.message(F.text == '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –î–û–î üìÑ')
async def send_dod_program(message: types.Message):
    await send_pdf_file(message)
    user_id = message.from_user.id
    timestampurl = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    cursor.execute('INSERT INTO file_stats (user_id, timestamp) VALUES (?, ?)', (user_id, timestampurl))
    conn.commit()

#region –û–ø—Ä–æ—Å
    
# –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞
@basic_router.message(Command('results'))
async def results(message: types.Message):
    await message.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞: \n\"–û—Ç–ª–∏—á–Ω–æ:\" {poll_results['0']}\n\"–•–æ—Ä–æ—à–æ:\" {poll_results['1']}\n\"–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ:\" {poll_results['2']}\n\"–ü–ª–æ—Ö–æ:\" {poll_results['3']}\n\"–£–∂–∞—Å–Ω–æ:\" {poll_results['4']}\n")

@basic_router.poll_answer()
async def poll_answer_handler(answer: types.PollAnswer):
    if answer.user.id not in voted_users:
        voted_users.append(answer.user.id)
        poll_results.update({f'{answer.option_ids[0]}' : poll_results[f'{answer.option_ids[0]}'] + 1})
        with open('Polina_DOD\\poll.json', 'w') as f:
            json.dump(poll_results, f)
        await bot.send_message(answer.user.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!")
    else:
        await bot.send_message(answer.user.id, "–í—ã —É–∂–µ –¥–∞–ª–∏ —Å–≤–æ—é –æ—Ü–µ–Ω–∫—É!")

@basic_router.message(Command('poll'))
async def poll_command(message: types.Message):
    if message.from_user.id in voted_users:
        await message.answer("–í—ã —É–∂–µ –¥–∞–ª–∏ —Å–≤–æ—é –æ—Ü–µ–Ω–∫—É!")
        return
    await message.answer_poll(question = '–î–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π –æ–∫–æ–Ω—á–µ–Ω.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞', 
                              options = ['–û—Ç–ª–∏—á–Ω–æ',
                                         '–•–æ—Ä–æ—à–æ',
                                         '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ', 
                                         '–ü–ª–æ—Ö–æ',
                                         '–£–∂–∞—Å–Ω–æ'],
                              is_anonymous = False,
                              type = 'regular',
                              allows_multiple_answers = False)

#endregion


# –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–æ—Ç–∞, —á—Ç–æ–±—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç, –∑–¥–µ—Å—å –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –±–µ–∑ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∏–∫–æ–≤
@basic_router.message(Command('users'))
async def get_users_stat(message: types.Message):
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∏ –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ —Å–∞–º—ã—Ö —Ä–∞–Ω–Ω–∏—Ö –∏ –ø–æ–∑–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('SELECT MIN(timestamp), MAX(timestamp) FROM user_stat')
    start_time_str, end_time_str = cursor.fetchone()
    start_time = datetime.fromisoformat(start_time_str)  # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞—Ç–∞–º–∏ –≤ –æ–±—ä–µ–∫—Ç—ã datetime
    end_time = datetime.fromisoformat(end_time_str)

    total_users, total_clicks = await db.count_users_button('user_stat', start_time_str,
                                                          end_time_str)  # —Å—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–≤–∞—Ç–µ–ª–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (–æ—Ç —Å–∞–º–æ–π —Ä–∞–Ω–Ω–µ–π –∑–∞–ø–∏—Å–∏ –≤ –ë–î –¥–æ —Å–∞–º–æ–π –ø–æ–∑–¥–Ω–µ–π)

    current_month = start_time.replace(day=1)  # –∑–∞–¥–∞—ë–º –Ω–∞—á–∞–ª—å–Ω—ã–π –º–µ—Å—è—Ü
    response_text = f'<b><i>–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</i></b> {total_users}\n\n'

    months = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å',
              '–î–µ–∫–∞–±—Ä—å']

    while current_month <= end_time:
        month_start = current_month
        month_name = months[current_month.month - 1]  # –∑–∞–¥–∞—ë–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        if current_month.month == 12:
            month_end = current_month.replace(year=current_month.year + 1, month=1, day=1) - timedelta(seconds=1)
        else:
            month_end = current_month.replace(month=current_month.month + 1) - timedelta(seconds=1)

        users_month, total_month = await db.count_users_month('user_stat',month_start,
                                                          month_end)  # —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        response_text += f'–∑–∞ {month_name} {current_month.year}: {users_month}\n'

        current_month = month_end + timedelta(seconds=1)  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É

    await message.answer(response_text, parse_mode=ParseMode.HTML)


# –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–æ—Ç–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–∞—Ä—Ç" - (–Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ + –≤—Å–µ –∫–ª–∏–ª–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É)
@basic_router.message(Command('url'))
async def get_users_url(message: types.Message):
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∏ –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ —Å–∞–º—ã—Ö —Ä–∞–Ω–Ω–∏—Ö –∏ –ø–æ–∑–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('SELECT MIN(timestamp), MAX(timestamp) FROM url')
    start_time_str, end_time_str = cursor.fetchone()
    start_time = datetime.fromisoformat(start_time_str)  # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞—Ç–∞–º–∏ –≤ –æ–±—ä–µ–∫—Ç—ã datetime
    end_time = datetime.fromisoformat(end_time_str)

    total_url, total_entries = await db.count_users_button('url', start_time_str,
                                         end_time_str)  # —Å—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–≤–∞—Ç–µ–ª–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (–æ—Ç —Å–∞–º–æ–π —Ä–∞–Ω–Ω–µ–π –∑–∞–ø–∏—Å–∏ –≤ –ë–î –¥–æ —Å–∞–º–æ–π –ø–æ–∑–¥–Ω–µ–π)

    current_month = start_time.replace(day=1)  # –∑–∞–¥–∞—ë–º –Ω–∞—á–∞–ª—å–Ω—ã–π –º–µ—Å—è—Ü
    response_text = f'<b><i>–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</i></b> {total_url}\n'
    response_text +=f'-------------------------------------\n<b><i>–í—Å–µ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π:</i></b> {total_entries}\n\n' 

    months = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å',
              '–î–µ–∫–∞–±—Ä—å']

    while current_month <= end_time:
        month_start = current_month
        month_name = months[current_month.month - 1]  # –∑–∞–¥–∞—ë–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        if current_month.month == 12:
            month_end = current_month.replace(year=current_month.year + 1, month=1, day=1) - timedelta(seconds=1)
        else:
            month_end = current_month.replace(month=current_month.month + 1) - timedelta(seconds=1)

        users_month_url, total_month_entries = await db.count_users_month('url', month_start,
                                                         month_end)  # —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        response_text += f'–∑–∞ {month_name} {current_month.year}:\n–Ω–æ–≤—ã–µ {users_month_url}\n–≤—Å–µ–≥–æ {total_month_entries}\n\n'

        current_month = month_end + timedelta(seconds=1)  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É

    await message.answer(response_text, parse_mode=ParseMode.HTML)

# –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–æ—Ç–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –î–û–î" - (–Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ + –≤—Å–µ –∫–ª–∏–ª–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É)                                                                                                                                                       (–¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –î–û–î)
@basic_router.message(Command('file'))
async def get_file_stats(message: types.Message):
    cursor.execute('SELECT MIN(timestamp), MAX(timestamp) FROM file_stats')
    start_time_str, end_time_str = cursor.fetchone()
    start_time = datetime.fromisoformat(start_time_str)  # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞—Ç–∞–º–∏ –≤ –æ–±—ä–µ–∫—Ç—ã datetime
    end_time = datetime.fromisoformat(end_time_str)

    total_users, total_file = await db.count_users_button('file_stats', start_time_str, end_time_str)
    response_text = f'<b><i>–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</i></b> {total_users}\n'
    response_text +=f'-------------------------------------\n<b><i>–í—Å–µ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π:</i></b> {total_file}\n\n'

    current_month = start_time.replace(day=1)
    months = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']

    while current_month <= end_time:
        month_start = current_month
        month_name = months[current_month.month - 1]
        if current_month.month == 12:
            month_end = current_month.replace(year=current_month.year + 1, month=1, day=1) - timedelta(seconds=1)
        else:
            month_end = current_month.replace(month=current_month.month + 1) - timedelta(seconds=1)

        users_month, total_month_file = await db.count_users_month('file_stats', month_start, month_end)
        response_text += f'–∑–∞ {month_name} {current_month.year}:\n–Ω–æ–≤—ã–µ {users_month}\n–≤—Å–µ–≥–æ {total_month_file}\n\n'

        current_month = month_end + timedelta(seconds=1)

    await message.answer(response_text, parse_mode=ParseMode.HTML)

# –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞
@basic_router.message(Command('results'))
async def results(message: types.Message):
    user_id = message.from_user.id
    if user_id in poll_results:
        total = poll_results[user_id].options
        await message.answer(f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞:\n {total} ')
    else:
        await message.answer('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã')


# —ç—Ç–∞ —à—Ç—É—á–∫–∞ –Ω—É–∂–Ω–∞, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–º—ë—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –±–æ—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É (–ø–æ —Ñ–∞–∫—Ç—É –¥–µ–ª–∞–µ—Ç —Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏ –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç)
@basic_router.message(Command('newroute'))
async def commands_start(message: types.Message):
    await message.answer("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç¬ª, –æ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞:",
                         reply_markup=startkb)


# –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
@basic_router.message(F.text == '–ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç üìå')
async def url_command(message: types.Message):
    inline_kbs = load_data()
    events_kb.inline_keyboard = []
    for i in inline_kbs['events']:
        events_kb.inline_keyboard.append([InlineKeyboardButton(text=i['header'], callback_data=f"generic_{i['key']}")])
    await message.answer('–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ—Å–µ—Ç–∏—Ç—å:  üëÄ', reply_markup=events_kb)

# –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Å–æ—Ü—Å–µ—Ç–∏
@basic_router.message(F.text == '–ù–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏ ‚úâ')
async def url_command(message: types.Message):
    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü—Å–µ—Ç—å',
        reply_markup=builder)

# –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, –¥–ª—è –∞–¥–º–∏–Ω–æ–≤—ã—Ö –∏ –ø—Ä–æ—Å—Ç—ã—Ö —Å–º–µ—Ä—Ç–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ 
@basic_router.message(Command('commands'))
async def send_commands(message: types.Message):
    if message.from_user.id in admin_id:
        commands_text = "–ö–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–º–∏ –í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n\n/users - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n/url - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–µ—Ä–µ—à–µ–¥—à–∏—Ö –ø–æ —Å—Å—ã–ª–∫–µ\n\n/file - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–∞–ø—Ä–æ—Å–∞ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –î–û–î\n\n/network - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ—à–µ–¥—à–∏—Ö –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∞ —Å–æ—Ü—Å–µ—Ç–∏\n/newbutton - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É –≤ —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n/deletebutton - —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"
    else:
        commands_text = "–ö–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–º–∏ –í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n\n/description - –û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞\n\n/restart - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞\n\n/newroute - –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç"

    await message.answer(commands_text)

# –∫–æ–º–∞–Ω–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞
@basic_router.message(Command('description'))
async def cmd_description(message: types.Message):
    description_file = f'descriptions_language_ru.txt'
    try:
        with open(description_file, 'r', encoding='utf-8') as file:
            description = file.read()
            await message.answer(description, parse_mode="HTML")
            await message.answer('üïä')
    except FileNotFoundError:
        logging.error(f'–§–∞–π–ª {description_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')


# –æ—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
@basic_router.callback_query(F.data == "cancel_action")
async def cancel_action(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.answer(text = "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback_query.answer()
    await asyncio.sleep(1)
    await callback_query.message.delete()

#region FSM –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏

@basic_router.message(Command('deletebutton'), StateFilter(None))
async def cmd_deletebutton(message: types.Message, state: FSMContext):
    if message.from_user.id not in admin_id: return
    await message.answer(text = "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è", reply_markup = cancel_menu)

    buttons = load_data()
    inner_kb = InlineKeyboardMarkup(inline_keyboard=[], resize_keyboard=True)
    for i in buttons["events"]:
        if i['has_inner'] == False:
            inner_kb.inline_keyboard.append([InlineKeyboardButton(text = i['header'] + ' ‚ùå', callback_data = f"generic_deletebutton_{i['key']}")])
        else:
            inner_kb.inline_keyboard.append([InlineKeyboardButton(text = i['header'] + ' ‚û°Ô∏è', callback_data = f"generic_deletebutton_{i['key']}")])
    await message.answer(text = "–í–µ–±–µ—Ä–∏—Ç–µ, –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup = inner_kb)

@basic_router.callback_query(F.data.regexp(r"generic_deletebutton_(.+)"))
async def deletebutton_choosing_layer(callback_query: types.CallbackQuery, state: FSMContext):
    buttons = load_data()
    event_key = callback_query.data.split('_')[2]
    btn = find_button_by_key(buttons['events'], event_key)
    inner_kb = InlineKeyboardMarkup(inline_keyboard=[], resize_keyboard=True)

    if btn['has_inner'] == True:
        for i in btn["inner_kb"]:
            if i['has_inner'] == False:
                inner_kb.inline_keyboard.append([InlineKeyboardButton(text = i['header'] + ' ‚ùå', callback_data = f"generic_deletebutton_{i['key']}")])
            else:
                inner_kb.inline_keyboard.append([InlineKeyboardButton(text = i['header'] + ' ‚û°Ô∏è', callback_data = f"generic_deletebutton_{i['key']}")])
        inner_kb.inline_keyboard.append([InlineKeyboardButton(text = "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å –ø–æ–¥–ø—É–Ω–∫—Ç üóëÔ∏è", callback_data = f"generic_deletebutton-menu_{btn['key']}")])
        inner_kb.inline_keyboard.append([InlineKeyboardButton(text = "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é", callback_data = "return_to_deletebutton_root")])
        await callback_query.message.edit_reply_markup(reply_markup = inner_kb)
    else:
        event_key = callback_query.data.split('_')[2]

        await state.update_data(source = event_key)
        await state.set_state(DeleteButtonForm.deleting)
        deleting_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data="delete_yes"),
            InlineKeyboardButton(text="–ù–µ—Ç", callback_data="delete_no")]
        ], resize_keyboard = True)
        await callback_query.message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–Ω–æ–ø–∫—É?", reply_markup=deleting_kb)
    await callback_query.answer()

@basic_router.callback_query(F.data == "return_to_deletebutton_root")
async def return_to_deletebutton_root(callback_query: types.CallbackQuery, state: FSMContext):
    buttons = load_data()
    inner_kb = InlineKeyboardMarkup(inline_keyboard=[], resize_keyboard=True)
    for i in buttons["events"]:
        if i['has_inner'] == False:
            inner_kb.inline_keyboard.append([InlineKeyboardButton(text = i['header'] + ' ‚ùå', callback_data = f"generic_deletebutton_{i['key']}")])
        else:
            inner_kb.inline_keyboard.append([InlineKeyboardButton(text = i['header'] + ' ‚û°Ô∏è', callback_data = f"generic_deletebutton_{i['key']}")])
    await callback_query.message.edit_reply_markup(reply_markup = inner_kb)
    await callback_query.answer()

@basic_router.callback_query(F.data.regexp(r"generic_deletebutton-menu_(.+)"))
async def deletebuttonmenu_choosing_layer(callback_query: types.CallbackQuery, state: FSMContext):
    event_key = callback_query.data.split('_')[2]

    await state.update_data(source = event_key)
    await state.set_state(DeleteButtonForm.deleting)
    deleting_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="delete_yes"),
        InlineKeyboardButton(text="–ù–µ—Ç", callback_data="delete_no")]
    ], resize_keyboard = True)
    await callback_query.message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤–µ—Å—å –ø–æ–¥–ø—É–Ω–∫—Ç?", reply_markup=deleting_kb)

@basic_router.callback_query(DeleteButtonForm.deleting, F.data == "delete_yes")
async def deletebutton_confirmation(callback_query: types.CallbackQuery, state: FSMContext):
    data = load_data()
    state_data = await state.get_data()
    button_key = state_data['source']
    
    if delete_button(data['events'], button_key):
        await callback_query.answer(f"–ö–Ω–æ–ø–∫–∞ –∏–ª–∏ –ø–æ–¥–ø—É–Ω–∫—Ç '{button_key}' —É–¥–∞–ª–µ–Ω–∞.", reply_markup = startkb)
        await callback_query.message.delete()
    else:
        await callback_query.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É '{button_key}'.", reply_markup = startkb)
        await callback_query.message.delete()
    save_data(data)
    await state.clear()

@basic_router.callback_query(DeleteButtonForm.deleting, F.data == "delete_no")
async def deletebutton_confirmation(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.answer(text = "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback_query.answer()
    await asyncio.sleep(1)
    await callback_query.message.delete()

#endregion

#region FSM –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ -------------------------------- 

@basic_router.message(Command('newbutton'), StateFilter(None))
async def cmd_newbutton(message: types.Message, state: FSMContext):
    if message.from_user.id not in admin_id: return
    await message.answer(text = "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è", reply_markup = cancel_menu)

    buttons = load_data()
    inner_kb = InlineKeyboardMarkup(inline_keyboard=[], resize_keyboard=True)
    for i in buttons["events"]:
        if i['has_inner'] == False:
            inner_kb.inline_keyboard.append([InlineKeyboardButton(text = i['header'], callback_data = f"generic_newbutton_{i['key']}")])
        else:
            inner_kb.inline_keyboard.append([InlineKeyboardButton(text = i['header'] + ' ‚û°Ô∏è', callback_data = f"generic_newbutton_{i['key']}")])
    inner_kb.inline_keyboard.append([InlineKeyboardButton(text = "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data = "create_newbutton_root")])
    inner_kb.inline_keyboard.append([InlineKeyboardButton(text = "‚ûï‚û°Ô∏è –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø—É–Ω–∫—Ç", callback_data = f"create_newbutton-menu_root")])
    await message.answer(text = "–í–µ–±–µ—Ä–∏—Ç–µ, –∫—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É:", reply_markup = inner_kb)
    

@basic_router.callback_query(F.data.regexp(r"generic_newbutton_(.+)"))
async def newbutton_choosing_layer(callback_query: types.CallbackQuery, state: FSMContext):
    buttons = load_data()
    event_key = callback_query.data.split('_')[2]
    btn = find_button_by_key(buttons['events'], event_key)
    inner_kb = InlineKeyboardMarkup(inline_keyboard=[], resize_keyboard=True)

    if btn['has_inner'] == False:
        await callback_query.answer(text = "–£ —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–µ–Ω—é")
    else:
        for i in btn["inner_kb"]:
            if i['has_inner'] == False:
                inner_kb.inline_keyboard.append([InlineKeyboardButton(text = i['header'], callback_data = f"generic_newbutton_{i['key']}")])
            else:
                inner_kb.inline_keyboard.append([InlineKeyboardButton(text = i['header'] + ' ‚û°Ô∏è', callback_data = f"generic_newbutton_{i['key']}")])
        inner_kb.inline_keyboard.append([InlineKeyboardButton(text = "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data = f"create_newbutton_{event_key}")])
        inner_kb.inline_keyboard.append([InlineKeyboardButton(text = "‚ûï‚û°Ô∏è –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø—É–Ω–∫—Ç", callback_data = f"create_newbutton-menu_{event_key}")])
        inner_kb.inline_keyboard.append([InlineKeyboardButton(text = "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é", callback_data = "return_to_newbutton_root")])
        await callback_query.message.edit_reply_markup(reply_markup = inner_kb)
    await callback_query.answer()


@basic_router.callback_query(F.data == "return_to_newbutton_root")
async def return_to_newbutton_root(callback_query: types.CallbackQuery, state: FSMContext):
    buttons = load_data()
    inner_kb = InlineKeyboardMarkup(inline_keyboard=[], resize_keyboard=True)
    for i in buttons["events"]:
        if i['has_inner'] == False:
            inner_kb.inline_keyboard.append([InlineKeyboardButton(text = i['header'], callback_data = f"generic_newbutton_{i['key']}")])
        else:
            inner_kb.inline_keyboard.append([InlineKeyboardButton(text = i['header'] + ' ‚û°Ô∏è', callback_data = f"generic_newbutton_{i['key']}")])
    inner_kb.inline_keyboard.append([InlineKeyboardButton(text = "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data = "create_newbutton_root")])
    inner_kb.inline_keyboard.append([InlineKeyboardButton(text = "‚ûï‚û°Ô∏è –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø—É–Ω–∫—Ç", callback_data = f"create_newbutton-menu_root")])
    
    await callback_query.message.edit_reply_markup(reply_markup=inner_kb)
    await callback_query.answer()

# –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞-–ø–æ–¥–º–µ–Ω—é
@basic_router.callback_query(F.data.regexp(r"create_newbutton-menu_(.+)"))
async def newbutton_menu_choosing_layer(callback_query: types.CallbackQuery, state: FSMContext):
    event_key = callback_query.data.split('_')[2]

    await state.update_data(source = event_key)
    await state.set_state(AddNewMenuButtonForm.reading_header)
    await callback_query.message.answer("–ß—Ç–æ –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ –∫–Ω–æ–ø–∫–µ?")
    await callback_query.answer()

@basic_router.message(AddNewMenuButtonForm.reading_header, F.text)
async def newbutton_menu_choosing_header(message: types.Message, state: FSMContext):
    await state.update_data(header = message.text)
    await state.set_state(AddNewMenuButtonForm.reading_message)
    await message.answer("–¢–µ–ø–µ—Ä—å, –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è, —á—Ç–æ –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–æ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n\n –ù–∞–ø–∏—à–∏ \'-\', –µ—Å–ª–∏ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è", reply_markup = emptyfieldkb)

@basic_router.message(AddNewMenuButtonForm.reading_message, F.text)
async def newbutton_menu_choosing_message(message: types.Message, state: FSMContext):
    await state.update_data(message = message.text)
    data = await state.get_data()

    event_key = data['source']

    if data['message'] == "-": data['message'] = ""

    new_button = {
        "key" : f"{datetime.now()}",
        "has_inner" : True,
        "header" : data['header'],
        "message" : data['message'],
        "query" : "",
        "inner_kb" : []
    }

    kb_data = load_data()
    if event_key == "root":
        kb_data['events'].append(new_button)
        await message.answer("–ö–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup = startkb)
    elif add_button(kb_data['events'], event_key, new_button):
        await message.answer("–ö–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup = startkb)
    else:
        await message.answer("–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup = startkb)
    save_data(kb_data)
    await state.clear()

# –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞-–¥–µ–π—Å—Ç–≤–∏–µ
@basic_router.callback_query(F.data.regexp(r"create_newbutton_(.+)"))
async def newbutton_choosing_layer(callback_query: types.CallbackQuery, state: FSMContext):
    event_key = callback_query.data.split('_')[2]

    await state.update_data(source = event_key)
    await state.set_state(AddNewButtonForm.reading_header)
    await callback_query.message.answer("–ß—Ç–æ –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ –∫–Ω–æ–ø–∫–µ?")
    await callback_query.answer()

@basic_router.message(AddNewButtonForm.reading_header, F.text)
async def newbutton_choosing_header(message: types.Message, state: FSMContext):
    await state.update_data(header = message.text)
    await state.set_state(AddNewButtonForm.reading_message)
    await message.answer("–¢–µ–ø–µ—Ä—å, –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è, —á—Ç–æ –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–æ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n\n –ù–∞–ø–∏—à–∏ \'-\', –µ—Å–ª–∏ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è", reply_markup = emptyfieldkb)

@basic_router.message(AddNewButtonForm.reading_message, F.text)
async def newbutton_choosing_message(message: types.Message, state: FSMContext):
    await state.update_data(message = message.text)
    await state.set_state(AddNewButtonForm.reading_query)
    await message.answer("–ò —Å–∞–º–æ–µ —Å–ª–æ–∂–Ω–æ–µ - –∑–∞–ø—Ä–æ—Å –∫ –ë–î. –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:\n\nSELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 1\n\n–ù–∞–ø–∏—à–∏ \'-\', –µ—Å–ª–∏ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")

@basic_router.message(AddNewButtonForm.reading_query, F.text)
async def newbutton_choosing_query(message: types.Message, state: FSMContext):
    await state.update_data(query = message.text) 
    data = await state.get_data()

    event_key = data['source']

    if data['query'] == "-": data['query'] = ""
    if data['message'] == "-": data['message'] = ""

    new_button = {
        "key" : f"{datetime.now()}",
        "has_inner" : False,
        "header" : data['header'],
        "message" : data['message'],
        "query" : data['query']
    }

    kb_data = load_data()
    if event_key == "root":
        kb_data['events'].append(new_button)
        await message.answer("–ö–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup = startkb)
    elif add_button(kb_data['events'], event_key, new_button):
        await message.answer("–ö–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup = startkb)
    else:
        await message.answer("–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup = startkb)
    save_data(kb_data)
    await state.clear()

#endregion

# —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ 
@basic_router.callback_query(F.data.regexp(r"generic_(.+)"))
async def handle_generic_event_kb(callback_query: types.CallbackQuery):
    event_key = callback_query.data.split('_')[1]
    kb_buttons = json.loads(codecs.open('kb.json', "r", "utf_8_sig").read())
    message = ""
    query = ""
    has_inner = False
    inner_kb = InlineKeyboardMarkup(inline_keyboard=[], resize_keyboard=True)

    btn = find_button_by_key(kb_buttons['events'], event_key)
    if "inner_kb" in btn:
        has_inner = True
        for i in btn["inner_kb"]:
            inner_kb.inline_keyboard.append([InlineKeyboardButton(text = i['header'], callback_data = f"generic_{i['key']}")])
            
    message = btn['message']
    query = btn['query']
          
    if message != "": 
        if has_inner:
            await bot.send_message(callback_query.from_user.id, message, reply_markup=inner_kb)
        else:
            await bot.send_message(callback_query.from_user.id, message)
    if query != "": 
        cursor.execute(query)
        result = cursor.fetchone()
        if result:
            fotka, innffaa, fcam, map = result
            fcam = types.BufferedInputFile(fcam, "fcam")
            fotka = types.BufferedInputFile(fotka, "fotka")
            await bot.send_message(callback_query.from_user.id, map)
            await asyncio.sleep(0.5)
            await bot.send_photo(callback_query.from_user.id, photo=fcam)
            await asyncio.sleep(0.5)
            await bot.send_message(callback_query.from_user.id, innffaa)
            await asyncio.sleep(0.5)
            await bot.send_photo(callback_query.from_user.id, photo=fotka)
        else:
            await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
        
    await bot.answer_callback_query(callback_query.id)
