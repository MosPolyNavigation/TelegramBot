import logging

from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup,\
    KeyboardButton, PollAnswer, Poll, ReplyKeyboardRemove
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.strategy import FSMStrategy
from aiogram.filters import Command

from datetime import datetime, timedelta

import asyncio
import sqlite3
import json

#–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('my.db')
cursor = conn.cursor()

TOKEN = '6959853578:AAG7DlllIQ5GynnPZrdfHgbKiqp1vyaixrE'
bot = Bot(token=TOKEN)
basic_router = Router()

async def on_startup(_):
    print('–ë–æ—Ç –≤—ã—à–µ–ª –≤ –æ–Ω–ª–∞–π–Ω')

#—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
cursor.execute('''CREATE TABLE IF NOT EXISTS user_stat (
                    user_id INTEGER,
                    timestamp TEXT
                )''')
cursor.execute('''CREATE TABLE IF NOT EXISTS url (
                    user_id INTEGER,
                    timestampurl TEXT
                )''')
cursor.execute('''CREATE TABLE IF NOT EXISTS user_votes (
                    user_id INTEGER,
                    answer TEXT
                )''')

#–≤—ã–∑–æ–≤, –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è —Å—Ç–∞—Ä—Ç, –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–∫–Ω–æ–ø–∫–∏ - –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç, –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–∞—Ä—Ç) –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –î–û–î–∞
@basic_router.message(Command('start'))
async def commands_start(message: types.Message):
    user_id = message.from_user.id
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    cursor.execute('INSERT INTO user_stat (user_id, timestamp) VALUES (?, ?)', (user_id, timestamp)) #TODO: db connections do not respond
    conn.commit()
    keyboard = ReplyKeyboardMarkup([
        [KeyboardButton('–ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç üìå')],
        [KeyboardButton(text='–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–∞—Ä—Ç üó∫')]
    ], resize_keyboard=True)

    pdf_file = '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –î–Ω—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π.pdf'

    try:
        with open(pdf_file, 'rb') as file:
            await bot.send_document(chat_id=message.chat.id, document=file)
    except FileNotFoundError:
        logging.error(f'–§–∞–π–ª {pdf_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        await message.answer('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.')
    await message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç¬ª, –∫–Ω–æ–ø–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.', reply_markup=keyboard)

#–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞
@basic_router.message(Command('restart'))
async def commands_start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)

    button_new_marshrut = KeyboardButton('–ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç üìå')
    keyboard.add(button_new_marshrut)

    url_button = types.KeyboardButton(text='–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–∞—Ä—Ç üó∫')
    keyboard.add(url_button)

    await message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç¬ª, –∫–Ω–æ–ø–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.', reply_markup=keyboard)

#–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∫–∞—Ä—Ç
@basic_router.message(F.text == '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–∞—Ä—Ç üó∫')
async def open_website(message: types.Message):
    user_id = message.from_user.id
    timestampurl = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    cursor.execute('INSERT INTO url (user_id, timestampurl) VALUES (?, ?)', (user_id, timestampurl))
    conn.commit()

    website_url = 'https://mospolynavigation.github.io/dod/'
    await message.answer(f'–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É ‚Üí <a href="{website_url}">¬´–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–∞—Ä—Ç¬ª</a>', disable_web_page_preview=True, parse_mode=types.ParseMode.HTML)


#—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ (–∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥, –¥–µ–∫–∞–±—Ä—å, —è–Ω–≤–∞—Ä—å –∏ —Ç–¥)
async def count_users_stat(start_time, end_time):
    cursor.execute('SELECT COUNT(DISTINCT user_id) FROM user_stat WHERE timestamp BETWEEN ? AND ?', (start_time, end_time))
    total_users = cursor.fetchone()[0]
    return total_users

async def count_users_December(start_December, end_December):
    cursor.execute('SELECT COUNT(DISTINCT user_id) FROM user_stat WHERE timestamp BETWEEN ? AND ? AND user_id NOT IN (SELECT DISTINCT user_id FROM user_stat WHERE timestamp < ?)',
                   (start_December, end_December, start_December))
    users_December = cursor.fetchone()[0]
    return users_December

async def count_users_January(start_January, end_January):
    cursor.execute('SELECT COUNT(DISTINCT user_id) FROM user_stat WHERE timestamp BETWEEN ? AND ? AND user_id NOT IN (SELECT DISTINCT user_id FROM user_stat WHERE timestamp < ?)',
                   (start_January, end_January, start_January))
    users_January = cursor.fetchone()[0]
    return users_January

async def count_users_February(start_February, end_February):
    cursor.execute('SELECT COUNT(DISTINCT user_id) FROM user_stat WHERE timestamp BETWEEN ? AND ? AND user_id NOT IN (SELECT DISTINCT user_id FROM user_stat WHERE timestamp < ?)',
                   (start_February, end_February, start_February))
    users_February = cursor.fetchone()[0]
    return users_February



#–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–æ—Ç–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
@basic_router.message(Command('users'))
async def get_users_stat(message: types.Message):
    start_time = '2023-01-01 00:00:00'  #–Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    end_time = '2024-12-31 23:59:59'  #–∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è
    total_users = await count_users_stat(start_time, end_time)

    end_December = '2023-12-31 23:59:59'
    start_December = '2023-12-01 00:00:00'
    users_December = await count_users_December(start_December, end_December)

    end_January = '2024-01-31 23:59:59'
    start_January = '2024-01-01 00:00:00'
    users_January = await count_users_January(start_January, end_January)

    end_February = '2024-02-29 23:59:59'
    start_February = '2024-02-01 00:00:00'
    users_February = await count_users_February(start_February, end_February)
    await message.answer(f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏: {total_users} \n\n–∑–∞ –¥–µ–∫–∞–±—Ä—å 2023: {users_December} \n–∑–∞ —è–Ω–≤–∞—Ä—å 2024: {users_January} \n–∑–∞ —Ñ–µ–≤—Ä–∞–ª—å 2024: {users_February}')


#—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ (–∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥, –¥–µ–∫–∞–±—Ä—å, —è–Ω–≤–∞—Ä—å –∏ —Ç–¥)
async def count_users_url(start_url, end_url):
    cursor.execute('SELECT COUNT(DISTINCT user_id) FROM url WHERE timestampurl BETWEEN ? AND ?', (start_url, end_url))
    total_url = cursor.fetchone()[0]
    return total_url

async def count_users_url_December(start_url_December, end_url_December):
    cursor.execute('SELECT COUNT(DISTINCT user_id) FROM url WHERE timestampurl BETWEEN ? AND ? AND user_id NOT IN (SELECT DISTINCT user_id FROM url WHERE timestampurl < ?)',
                   (start_url_December, end_url_December, start_url_December))
    users_url_December = cursor.fetchone()[0]
    return users_url_December



async def count_users_url_January(start_url_January, end_url_January):
    cursor.execute('SELECT COUNT(DISTINCT user_id) FROM url WHERE timestampurl BETWEEN ? AND ? AND user_id NOT IN (SELECT DISTINCT user_id FROM url WHERE timestampurl < ?)',
                   (start_url_January, end_url_January, start_url_January))
    users_url_January = cursor.fetchone()[0]
    return users_url_January

async def count_users_url_February(start_url_February, end_url_February):
    cursor.execute('SELECT COUNT(DISTINCT user_id) FROM url WHERE timestampurl BETWEEN ? AND ? AND user_id NOT IN (SELECT DISTINCT user_id FROM url WHERE timestampurl < ?)',
                   (start_url_February, end_url_February, start_url_February))
    users_url_February = cursor.fetchone()[0]
    return users_url_February

#–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–æ—Ç–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ (–¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∫–∞—Ä—Ç)
@basic_router.message(Command('url'))
async def get_users_url(message: types.Message):
    start_url = '2023-01-01 00:00:00'  #–Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    end_url = '2024-12-31 23:59:59'  #–∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è
    total_url = await count_users_url(start_url, end_url)

    end_url_December = '2023-12-31 23:59:59'
    start_url_December = '2023-12-01 00:00:00'
    users_url_December = await count_users_url_December(start_url_December, end_url_December)

    end_url_January = '2024-01-31 23:59:59'
    start_url_January = '2024-01-01 00:00:00'
    users_url_January = await count_users_url_January(start_url_January, end_url_January)

    end_url_February = '2024-02-29 23:59:59'
    start_url_February = '2024-02-01 00:00:00'
    users_url_February = await count_users_url_February(start_url_February, end_url_February)
    await message.answer(f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏, –ø–µ—Ä–µ—à–µ–¥—à–∏—Ö –ø–æ —Å—Å—ã–ª–∫–µ: {total_url} \n\n–∑–∞ –¥–µ–∫–∞–±—Ä—å 2023: {users_url_December}  \n–∑–∞ —è–Ω–≤–∞—Ä—å 2024: {users_url_January} \n–∑–∞ —Ñ–µ–≤—Ä–∞–ª—å 2024: {users_url_February} ')



poll_results = {}  #–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–æ–≤
#–æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ä–æ—Å–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è
async def send_poll():
    #–¥–µ–Ω—å, –º–µ—Å—è—Ü, –≥–æ–¥ –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞
    scheduled_time = datetime(2024, 2, 10, 18, 0, 0)

    #–æ–∂–∏–¥–∞–Ω–∏–µ –¥–æ –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞
    while datetime.now() < scheduled_time:
        await asyncio.sleep(60)  #–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    #–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –∫–æ–º–∞–Ω–¥–æ–π —Å—Ç–∞—Ä—Ç –≤ –∑–∞–¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    start_time = '2024-02-01 00:00:00'
    end_time = '2024-02-12 23:59:59'
    users = await get_users_in_period(start_time, end_time)

    #–æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ä–æ—Å–∞ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ —Å–ø–∏—Å–∫–∞
    for user_id in users:
        poll_message = await bot.send_poll(chat_id=user_id,
                                           question='–î–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π –æ–∫–æ–Ω—á–µ–Ω.\n–û—Ü–µ–Ω–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞.',
                                           options=['1', '2', '3', '4', '5'])

        #–∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞
        await asyncio.sleep(14400)
        poll_result = await bot.stop_poll(chat_id=user_id, message_id=poll_message.message_id)
        poll_results[user_id] = poll_result


#–ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞
@basic_router.message(Command('results'))
async def results(message: types.Message):
    user_id = message.from_user.id
    if user_id in poll_results:
        total = poll_results[user_id].options
        await message.answer(f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞:\n {total} ')
    else:
        await message.answer('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Ö—Å—è –∫–æ–º–∞–Ω–¥–æ–π —Å—Ç–∞—Ä—Ç –≤ –∑–∞–¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
async def get_users_in_period(start_time, end_time):
    cursor.execute('SELECT DISTINCT user_id FROM user_stat WHERE timestamp BETWEEN ? AND ?', (start_time, end_time))
    users = [row[0] for row in cursor.fetchall()]
    return users

async def scheduler():
    while True:
        try:
            await send_poll()
        except Exception as e:
            print(f'An error occurred: {e}')
        finally:
            await asyncio.sleep(86400)  #–ø–æ–≤—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞ (86400 —Å–µ–∫—É–Ω–¥—ã)



#—ç—Ç–∞ —à—Ç—É—á–∫–∞ –Ω—É–∂–Ω–∞, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–º—ë—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –±–æ—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É (–ø–æ —Ñ–∞–∫—Ç—É –¥–µ–ª–∞–µ—Ç —Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏ –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç)
@basic_router.message(Command('newroute'))
async def commands_start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    button_new_marshrut = KeyboardButton('–ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç üìå')
    keyboard.add(button_new_marshrut)

    url_button = types.KeyboardButton(text='–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–∞—Ä—Ç üó∫')
    keyboard.add(url_button)

    await message.answer("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç¬ª, –æ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞:", reply_markup=keyboard)


#–≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
@basic_router.message(F.text == '–ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç üìå')
async def url_command(message : types.Message):
	await message.answer('–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ—Å–µ—Ç–∏—Ç—å:  üëÄ', reply_markup=urlkb)


#–∫–æ–º–∞–Ω–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞
@basic_router.message(Command('description'))
async def cmd_description(message: types.Message):
    description_file = f'descriptions_language_ru.txt'
    try:
        with open(description_file, 'r', encoding='utf-8') as file:
            description = file.read()
            await message.answer(description, parse_mode="HTML")
            await message.answer('üïä')
    except FileNotFoundError:
        logging.error(f'–§–∞–π–ª {description_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')


#—Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –î–û–î–∞
urlkb = InlineKeyboardMarkup(inline_keyboard= [
    [InlineKeyboardButton(text='–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å', callback_data='v1')],
    [InlineKeyboardButton(text='–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã', callback_data='v2')],
    [InlineKeyboardButton(text='–ü—Ä–∏—ë–º–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è', callback_data='v3')],
    [InlineKeyboardButton(text='–í—ã—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤', callback_data='v4')],
    [InlineKeyboardButton(text='–í—ã—Å—Ç–∞–≤–æ—á–Ω–∞—è –∑–æ–Ω–∞', callback_data='v5')],
    [InlineKeyboardButton(text='–ë–∏–∑–Ω–µ—Å-–∑–æ–Ω–∞', callback_data='v6')],
    [InlineKeyboardButton(text='–ü–∞–±–ª–∏–∫-—Ç–æ–ª–∫ —Å\n–ò–≥–æ—Ä–µ–º –ê—Å–∞–Ω–æ–≤—ã–º', callback_data='v7')],
    [InlineKeyboardButton(text='–ù–µ—Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', callback_data='v8')],
    [InlineKeyboardButton(text='–°—Ç–µ–Ω–¥—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', callback_data='v9')],
    [InlineKeyboardButton(text='–í–∏–∫—Ç–æ—Ä–∏–Ω—ã', callback_data='v11')],
    [InlineKeyboardButton(text='–ö–≤–µ—Å—Ç "–ó–∞—á–µ—Ç–∫–∞ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞"', callback_data='v12')],
    [InlineKeyboardButton(text='–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —à–∫–æ–ª–∞ "–ü–æ–ª–∏–≥—Ä–∞—Ñ"', callback_data='v13')],
    [InlineKeyboardButton(text='–ö–∏–±–µ—Ä—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ç–∞–Ω—Ü—ã', callback_data='v14')]
    #[InlineKeyboardButton(text='WorkShop', callback_data='v10')]
    ], resize_keyboard = True)


@basic_router.callback_query(F.data == 'v3')
async def handle_tok1(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–£–∑–Ω–∞—Ç—å –≤—Å—ë –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏, —Ç—ã —Å–º–æ–∂–µ—à—å –≤ —Ö–æ–ª–ª–µ –∫–æ—Ä–ø—É—Å–∞ –ê')

    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 3")
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç

        await bot.send_message(callback_query.from_user.id, map)
        await asyncio.sleep(0.5)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)
        await asyncio.sleep(0.5)
        await bot.send_message(callback_query.from_user.id, innffaa)
        await asyncio.sleep(0.5)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)

@basic_router.callback_query(F.data == 'v14')
async def handle_tok1(callback_query: types.CallbackQuery):

    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 41")
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç

        await bot.send_message(callback_query.from_user.id, map)
        await asyncio.sleep(0.5)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)
        await asyncio.sleep(0.5)
        await bot.send_message(callback_query.from_user.id, innffaa)
        await asyncio.sleep(0.5)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)

@basic_router.callback_query(F.data == 'v12')
async def handle_tok1(callback_query: types.CallbackQuery):

    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 12")
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç

        await bot.send_message(callback_query.from_user.id, map)
        await asyncio.sleep(0.5)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)
        await asyncio.sleep(0.5)
        await bot.send_message(callback_query.from_user.id, innffaa)
        await asyncio.sleep(0.5)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)

@basic_router.callback_query(F.data == 'v13')
async def handle_tok1(callback_query: types.CallbackQuery):


    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 13")
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç

        await bot.send_message(callback_query.from_user.id, map)
        await asyncio.sleep(0.5)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)
        await asyncio.sleep(0.5)
        await bot.send_message(callback_query.from_user.id, innffaa)
        await asyncio.sleep(0.5)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)

'''@basic_router.callback_query(F.data == 'v10')
async def handle_tok1(callback_query: types.CallbackQuery):
    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 10")
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç

        await bot.send_message(callback_query.from_user.id, map)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)
        await bot.send_message(callback_query.from_user.id, innffaa)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)'''

@basic_router.callback_query(F.data == 'v11')
async def handle_tok1(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–¢—ã –º–æ–∂–µ—à—å –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞—Ö:\n–≤ —Ö–æ–ª–ª–µ –∫–æ—Ä–ø—É—Å–∞ –ê –ø—Ä–æ–π–¥—É—Ç\n¬´–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ –Ω–∞—É—á–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∏—è—Ö –Ω–∞ —Å—Ç–µ–Ω–¥–µ –°–ù–û¬ª, ¬´–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É¬ª\n–∞ —Ç–∞–∫–∂–µ –≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ê112–∞\n¬´–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏¬ª')

    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 111")
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç

        await bot.send_message(callback_query.from_user.id, map)
        await asyncio.sleep(0.5)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)
        await asyncio.sleep(0.5)
        await bot.send_message(callback_query.from_user.id, innffaa)
        await asyncio.sleep(0.5)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)

@basic_router.callback_query(F.data == 'v8')
async def handle_tok1(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –≤—Å—ë –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏, –∞ —Ç–∞–∫–∂–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –ï–ì–≠ –ø–æ —Ñ–∏–∑–∏–∫–µ, —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É, –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ, –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ.')

    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 3")
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç

        await bot.send_message(callback_query.from_user.id, map)
        await asyncio.sleep(0.5)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)
        await asyncio.sleep(0.5)
        await bot.send_message(callback_query.from_user.id, innffaa)
        await asyncio.sleep(0.5)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)

@basic_router.callback_query(F.data == 'v7')
async def handle_tok1(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–ü–∞–±–ª–∏–∫-—Ç–æ–ª–∫ —Å –±–ª–æ–≥–µ—Ä–æ–º –≤ —Å—Ñ–µ—Ä–µ –∞–≤—Ç–æ—Å–ø–æ—Ä—Ç–∞ –ò–≥–æ—Ä–µ–º –ê—Å–∞–Ω–æ–≤—ã–º.\n\nü§î–ó–∞–¥—É–º—ã–≤–∞–ª–∏—Å—å –æ —Ç–æ–º, –∫–∞–∫ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Å–≤–æ—ë —Ö–æ–±–±–∏ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é?\n\n–ù–∞ –î–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π –º—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª–∏—Å—Ç–∞ –∏ –±–ª–æ–≥–µ—Ä–∞ –≤ —Å—Ñ–µ—Ä–µ –∞–≤—Ç–æ—Å–ø–æ—Ä—Ç–∞ –ò–≥–æ—Ä—è –ê—Å–∞–Ω–æ–≤–∞. –ù–∞ –ø–∞–±–ª–∏–∫-—Ç–æ–∫–µ –º—ã –æ–±—Å—É–¥–∏–º, –∫–∞–∫ —Å–æ—á–µ—Ç–∞—Ç—å –Ω–µ—Å–æ—á–µ—Ç–∞–µ–º–æ–µ –∏ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –Ω–µ —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞—á–∏–Ω–∞–π—Ç–µ –≥–æ—Ç–æ–≤–∏—Ç—å —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã!\n\n–ö–æ–Ω–µ—á–Ω–æ, –ø–æ–∑–Ω–∞–∫–æ–º–∏–º –≤–∞—Å —Å —Ñ–ª–∞–≥–º–∞–Ω—Å–∫–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏, –ø–æ–∫–∞–∂–µ–º —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –≤—ã—Å—Ç–∞–≤–∫–µ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ä–∞—Å—Å–∫–∞–∂–µ–º –ø—Ä–æ –Ω–∞—É–∫—É –∏ –≤–Ω–µ—É—á–µ–±–Ω—É—é –∂–∏–∑–Ω—å –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ.\n\n–£–≤–∏–¥–∏–º—Å—è –≤ 11:00 –≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ê200!')

    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 7")
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç
        await asyncio.sleep(0.5)
        await bot.send_message(callback_query.from_user.id, map)
        await asyncio.sleep(0.5)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)
        await asyncio.sleep(0.5)
        await bot.send_message(callback_query.from_user.id, innffaa)
        await asyncio.sleep(0.5)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)

@basic_router.callback_query(F.data == 'v4')
async def handle_tok1(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–ó–¥–µ—Å—å –ø–æ–º–∏–º–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤, –≤—ã —Ç–∞–∫–∂–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞—Ö –∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞—Ö –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.')

    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 4")
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç

        await bot.send_message(callback_query.from_user.id, map)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)
        await bot.send_message(callback_query.from_user.id, innffaa)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)


@basic_router.callback_query(F.data == 'v5')
async def handle_tok1(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–ü–æ—Å–µ—Ç–∏—Ç—å ¬´–í—ã—Å—Ç–∞–≤–æ—á–Ω—ã–µ –∑–æ–Ω—ã¬ª –º–æ–∂–Ω–æ –≤ –∞—É–¥–∏—Ç–æ—Ä–∏—è—Ö –ë303 –∏ –ë410')

    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 5")
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç

        await bot.send_message(callback_query.from_user.id, map)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)
        await bot.send_message(callback_query.from_user.id, innffaa)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)

@basic_router.callback_query(F.data == 'v6')
async def handle_tok1(callback_query: types.CallbackQuery):

    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 6")
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç

        await bot.send_message(callback_query.from_user.id, map)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)
        await bot.send_message(callback_query.from_user.id, innffaa)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)

@basic_router.callback_query(F.data == 'v9')
async def handle_tok1(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, 'C—Ç–µ–Ω–¥—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n¬´–ò–Ω–∂–µ–Ω–µ—Ä–Ω–∞—è —à–∫–æ–ª–∞¬ª\n¬´–ö—É—Ä—Å—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠¬ª\n¬´–î–æ–≥–æ–≤–æ—Ä–Ω–æ–π –æ—Ç–¥–µ–ª¬ª\n–Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ - –í104\n\nC—Ç–µ–Ω–¥—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n¬´–ü—Ä–æ—Ñ—Å–æ—é–∑–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –∏ –æ–±—É—á–∞—é—â–∏—Ö—Å—è¬ª\n¬´–£–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∫–∞¬ª\n¬´–£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ —Ä–∞–±–æ—Ç–µ —Å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏¬ª\n–Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ - –í105')

    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 9")
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç

        await bot.send_message(callback_query.from_user.id, map)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)

        await bot.send_message(callback_query.from_user.id, innffaa)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)

@basic_router.callback_query(F.data=='v2')
async def v2_call(callback : types.CallbackQuery):
	await callback.message.answer('–í—ã–±–µ—Ä–∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º—É —Ç–µ–±—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é:', reply_markup=inm)
	await callback.answer()

# –ï—Å–ª–∏ –≤—ã–±–æ—Ä –ø–∞–ª –Ω–∞ –æ—Ñ–∏—Ü —á–∞—Å—Ç—å
inm = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ê—Ä—Ç, –¥–∏–∑–∞–π–Ω –∏ –º–µ–¥–∏–∞', callback_data='m1')],
    [InlineKeyboardButton(text='–£—Ä–±–∞–Ω–∏—Å—Ç–∏–∫–∞', callback_data='m2')],
    [InlineKeyboardButton(text='–ë–∏–∑–Ω–µ—Å', callback_data='m4')],
    [InlineKeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', callback_data='m5')],
    [InlineKeyboardButton(text='–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç, —Ü–∏—Ñ—Ä–∞, –ª–æ–≥–∏—Å—Ç–∏–∫–∞', callback_data='m6')],
    [InlineKeyboardButton(text='–≠–∫–æ–ª–æ–≥–∏—è –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∂–∏–∑–Ω–∏', callback_data='m3')],
    [InlineKeyboardButton(text='–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', callback_data='m7')],
], resize_keyboard = True)

@basic_router.callback_query(F.data == 'm1')
async def handle_tok1(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é ¬´–ê—Ä—Ç, –¥–∏–∑–∞–π–Ω –∏ –º–µ–¥–∏–∞¬ª –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ –∞—É–¥–∏—Ç–æ—Ä–∏—è—Ö –ë303, –ë306, –ë309, –ë310, –ë410')

    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 21")
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç

        await bot.send_message(callback_query.from_user.id, map)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)
        await bot.send_message(callback_query.from_user.id, innffaa)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)

@basic_router.callback_query(F.data == 'm2')
async def handle_tok1(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é ¬´–£—Ä–±–∞–Ω–∏—Å—Ç–∏–∫–∞¬ª –æ—Ç —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ —É—Ä–±–∞–Ω–∏—Å—Ç–∏–∫–∏ –∏ –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ë307')

    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 22")
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç

        await bot.send_message(callback_query.from_user.id, map)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)
        await bot.send_message(callback_query.from_user.id, innffaa)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)


@basic_router.callback_query(F.data == 'm4')
async def handle_tok1(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é ¬´–ë–∏–∑–Ω–µ—Å¬ª –æ—Ç —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ë311')

    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 24")
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç

        await bot.send_message(callback_query.from_user.id, map)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)
        await bot.send_message(callback_query.from_user.id, innffaa)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)

@basic_router.callback_query(F.data == 'm5')
async def handle_tok1(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é ¬´–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏¬ª –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ù305')

    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 25")
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç

        await bot.send_message(callback_query.from_user.id, map)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)
        await bot.send_message(callback_query.from_user.id, innffaa)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)

@basic_router.callback_query(F.data == 'm3')
async def handle_tok1(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é ¬´–≠–∫–æ–ª–æ–≥–∏—è –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∂–∏–∑–Ω–∏¬ª –æ—Ç –§–∞–∫—É–ª—å—Ç–µ—Ç–∞ —Ö–∏–º–∏—á–µ—Å–∫–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø—Ä–æ–π–¥—ë—Ç –≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ë303.')

    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 23")
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç

        await bot.send_message(callback_query.from_user.id, map)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)
        await bot.send_message(callback_query.from_user.id, innffaa)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)

@basic_router.callback_query(F.data == 'm7')
async def handle_tok1(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é ¬´–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ¬ª –æ—Ç —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ —Ö–∏–º–∏—á–µ—Å–∫–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∞ —Ç–∞–∫–∂–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞ –ø—Ä–æ–π–¥—ë—Ç –≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ë303.')

    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 10") #43 –ø–æ –ª–æ–≥–∏–∫–µ, –Ω–æ –º–∞—Ä—à—Ä—É—Ç –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è —Å 10 —Å—Ç—Ä–æ–∫–æ–π
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç

        await bot.send_message(callback_query.from_user.id, map)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)
        await bot.send_message(callback_query.from_user.id, innffaa)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)

@basic_router.callback_query(F.data == 'm6')
async def handle_tok1(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é ¬´–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç, —Ü–∏—Ñ—Ä–∞, –ª–æ–≥–∏—Å—Ç–∏–∫–∞¬ª –æ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –ø—Ä–æ–π–¥—É—Ç –≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ë411')

    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 26")
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç

        await bot.send_message(callback_query.from_user.id, map)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)
        await bot.send_message(callback_query.from_user.id, innffaa)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)

@basic_router.callback_query(F.data=='v1')
async def v2_call(callback : types.CallbackQuery):
	await callback.message.answer('–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ—Å–µ—Ç–∏—Ç—å:', reply_markup=inkb)
	await callback.answer()


# –ï—Å–ª–∏ –≤—ã–±–æ—Ä –ø–∞–ª –Ω–∞ –æ—Ñ–∏—Ü —á–∞—Å—Ç—å
inkb = InlineKeyboardMarkup(inline_keyboard = [
    [InlineKeyboardButton(text='–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –≤ –ê200', callback_data='w1')],
    #[InlineKeyboardButton(text='–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏', callback_data='w4')],
    [InlineKeyboardButton(text='–í—Å—Ç—Ä–µ—á–∞ —Å –¥–µ–∫–∞–Ω–æ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞', callback_data='w2')],
    [InlineKeyboardButton(text='–í—Å—Ç—Ä–µ—á–∞ —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞', callback_data='w3')],
], resize_keyboard = True)


#–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å
@basic_router.callback_query(F.data == 'w1')
async def handle_tok1(callback_query: types.CallbackQuery):

    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 11")
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç

        await bot.send_message(callback_query.from_user.id, map)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)
        await bot.send_message(callback_query.from_user.id, innffaa)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)

'''@basic_router.callback_query(F.data == 'w4')
async def handle_tok1(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ –∞—É–¥–∏—Ç–æ—Ä–∏—è—Ö: –ë303 –∏ –ë404')

    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 14")
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç

        await bot.send_message(callback_query.from_user.id, map)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)
        await bot.send_message(callback_query.from_user.id, innffaa)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)'''


@basic_router.callback_query(F.data == 'w2')
async def v2_call(callback : types.CallbackQuery):
	await callback.message.answer('–í—ã–±–µ—Ä–∏ —Å –¥–µ–∫–∞–Ω–æ–º –∫–∞–∫–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ —Ç—ã —Ö–æ—á–µ—à—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è:', reply_markup=inw)
	await callback.answer()

inw = InlineKeyboardMarkup(inline_keyboard= [
[InlineKeyboardButton(text='–ú–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ', callback_data='ww1')],
[InlineKeyboardButton(text='–£—Ä–±–∞–Ω–∏—Å—Ç–∏–∫–∞ –∏ \n'
                                '–≥–æ—Ä–æ–¥—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ', callback_data='ww2')],
[InlineKeyboardButton(text='–•–∏–º–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ \n'
                                '–∏ –±–µ–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', callback_data='ww3')],
[InlineKeyboardButton(text='–≠–∫–æ–Ω–æ–º–∏–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data='ww4')],
[InlineKeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', callback_data='ww5')],
[InlineKeyboardButton(text='–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç', callback_data='ww6')],
], resize_keyboard = True)


@basic_router.callback_query(F.data == 'ww1')
async def handle_tok1(callback_query: types.CallbackQuery):

    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 121")
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç

        await bot.send_message(callback_query.from_user.id, map)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)
        await bot.send_message(callback_query.from_user.id, innffaa)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)

@basic_router.callback_query(F.data == 'ww2')
async def handle_tok1(callback_query: types.CallbackQuery):

    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 122")
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç
        await bot.send_message(callback_query.from_user.id, map)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)
        await bot.send_message(callback_query.from_user.id, innffaa)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)

@basic_router.callback_query(F.data == 'ww3')
async def handle_tok1(callback_query: types.CallbackQuery):

    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 123")
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç

        await bot.send_message(callback_query.from_user.id, map)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)
        await bot.send_message(callback_query.from_user.id, innffaa)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)

@basic_router.callback_query(F.data == 'ww4')
async def handle_tok1(callback_query: types.CallbackQuery):

    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 124")
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç
        await bot.send_message(callback_query.from_user.id, map)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)
        await bot.send_message(callback_query.from_user.id, innffaa)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)

@basic_router.callback_query(F.data == 'ww5')
async def handle_tok1(callback_query: types.CallbackQuery):

    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 125")
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç

        await bot.send_message(callback_query.from_user.id, map)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)
        await bot.send_message(callback_query.from_user.id, innffaa)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)

@basic_router.callback_query(F.data == 'ww6')
async def handle_tok1(callback_query: types.CallbackQuery):

    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 126")
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç
        await bot.send_message(callback_query.from_user.id, map)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)
        await bot.send_message(callback_query.from_user.id, innffaa)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)


@basic_router.callback_query(F.text == 'w3')
async def v2_call(callback : types.CallbackQuery):
	await callback.message.answer('–í—ã–±–µ—Ä–∏ —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º –∫–∞–∫–æ–≥–æ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞ —Ç—ã —Ö–æ—á–µ—à—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è:', reply_markup=ynw)
	await callback.answer()

ynw = InlineKeyboardMarkup(inline_keyboard= [
    [InlineKeyboardButton(text='–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç', callback_data='yw1')],
    [InlineKeyboardButton(text='–ò–Ω—Å—Ç–∏—Ç—É—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–∞\n'
                                    '–∫–Ω–∏–≥–∏ –∏–º–µ–Ω–∏–∏ –í.–ê. –§–∞–≤–æ—Ä—Å–∫–æ–≥–æ', callback_data='yw2')],
    [InlineKeyboardButton(text='–ò–Ω—Å—Ç–∏—Ç—É—Ç –∏–∑–¥–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–µ–ª–∞\n'
                                    '–∏ –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–∏', callback_data='yw3')],
], resize_keyboard = True)

@basic_router.callback_query(F.data == 'yw1')
async def handle_tok1(callback_query: types.CallbackQuery):

    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 131")
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç
        await bot.send_message(callback_query.from_user.id, map)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)
        await bot.send_message(callback_query.from_user.id, innffaa)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)

@basic_router.callback_query(F.data == 'yw2')
async def handle_tok1(callback_query: types.CallbackQuery):

    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 132")
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç
        await bot.send_message(callback_query.from_user.id, map)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)
        await bot.send_message(callback_query.from_user.id, innffaa)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)

@basic_router.callback_query(F.data == 'yw3')
async def handle_tok1(callback_query: types.CallbackQuery):

    cursor.execute("SELECT fotka, innffaa, fcam, map FROM ti WHERE korpus = 133")
    result = cursor.fetchone()

    if result:
        fotka, innffaa, fcam, map = result
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ç–µ–∫—Å—Ç
        await bot.send_message(callback_query.from_user.id, map)
        await bot.send_photo(callback_query.from_user.id, photo=fcam)
        await bot.send_message(callback_query.from_user.id, innffaa)
        await bot.send_photo(callback_query.from_user.id, photo=fotka)
    else:
        await bot.send_message(callback_query.from_user.id, '–î–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    await bot.answer_callback_query(callback_query.id)

async def main():
    logging.basicConfig(
        level=logging.INFO, 
        format="%(asctime)s - %(levelname)s - %(name)s - %(message)s")
    dp = Dispatcher(storage=MemoryStorage(), fsm_strategy=FSMStrategy.CHAT)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞

if __name__ == "__main__":
    asyncio.run(main())
    