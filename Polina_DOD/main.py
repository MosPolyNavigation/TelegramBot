import asyncio
import logging
from datetime import datetime, time

from asgiref.sync import async_to_sync
import pytz
from aiogram import Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.strategy import FSMStrategy
from aiogram import types

from env import *
from handlers import basic_router


async def main():
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(name)s - %(message)s")
    dp = Dispatcher(storage=MemoryStorage(), fsm_strategy=FSMStrategy.CHAT)
    dp.include_router(basic_router)

    await bot.delete_webhook(drop_pending_updates=True)

    asyncio.create_task(dp.start_polling(bot, handle_as_tasks=True, allowed_updates=dp.resolve_used_update_types()))
    while True:
        asyncio.create_task(send_dod())
        await asyncio.sleep(60)


# –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –î–û–î

async def send_dod():
    # –≥–æ–¥, –º–µ—Å—è—Ü, –¥–µ–Ω—å, –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
    scheduled_time_1 = datetime(2024, 3, 23, 9, 0, 0)
    scheduled_time_2 = datetime(2024, 3, 23, 9, 1, 0)

    # –æ–∂–∏–¥–∞–Ω–∏–µ –¥–æ –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
    while datetime.now() < scheduled_time_1 or datetime.now() > scheduled_time_2:
        return 0
    # –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await get_all_users()

    file_pdf = '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –î–Ω—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π.pdf'
    file = types.FSInputFile(file_pdf)
    for user_id in users:
        await bot.send_document(chat_id=user_id,
                                caption="–ü—Ä–∏–≤–µ—Ç üïä\n\n–°–µ–≥–æ–¥–Ω—è –≤ –ø—Ä–æ—Ö–æ–¥–∏—Ç –¥–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π. –ó–∞–±–∏—Ä–∞–π –ø—Ä–æ–≥—Ä–∞–º–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ, –∞ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /restart –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π. \n\n–í—Å—Ç—Ä–µ—á–∞–µ–º—Å—è –≤ 11:00 –Ω–∞ –ë–æ–ª—å—à–æ–π –°–µ–º–µ–Ω–æ–≤—Å–∫–æ–π, 38",
                                document=file)
    return 0


# –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ä–æ—Å–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è
async def send_poll():
    # –¥–µ–Ω—å, –º–µ—Å—è—Ü, –≥–æ–¥ –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞
    scheduled_time = datetime(2024, 2, 10, 18, 0, 0)

    # –æ–∂–∏–¥–∞–Ω–∏–µ –¥–æ –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞
    while datetime.now() < scheduled_time:
        await asyncio.sleep(60)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    # –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –∫–æ–º–∞–Ω–¥–æ–π —Å—Ç–∞—Ä—Ç –≤ –∑–∞–¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    start_time = '2024-02-01 00:00:00'
    end_time = '2024-02-12 23:59:59'
    users = await get_users_in_period(start_time, end_time)

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ä–æ—Å–∞ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ —Å–ø–∏—Å–∫–∞
    for user_id in users:
        poll_message = await bot.send_poll(chat_id=user_id,
                                           question='–î–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π –æ–∫–æ–Ω—á–µ–Ω.\n–û—Ü–µ–Ω–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞.',
                                           options=['1', '2', '3', '4', '5'])

        # –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞
        await asyncio.sleep(14400)
        poll_result = await bot.stop_poll(chat_id=user_id, message_id=poll_message.message_id)
        poll_results[user_id] = poll_result


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Ö—Å—è –∫–æ–º–∞–Ω–¥–æ–π —Å—Ç–∞—Ä—Ç –≤ –∑–∞–¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
async def get_users_in_period(start_time, end_time):
    cursor.execute('SELECT DISTINCT user_id FROM user_stat WHERE timestamp BETWEEN ? AND ?', (start_time, end_time))
    users = [row[0] for row in cursor.fetchall()]
    return users('SELECT DISTINCT user_id FROM user_stat')


async def get_all_users():
    cursor.execute('SELECT DISTINCT user_id FROM user_stat')
    users = [row[0] for row in cursor.fetchall()]
    return users


async def scheduler():
    while True:
        try:
            await send_poll()
        except Exception as e:
            print(f'An error occurred: {e}')
        finally:
            await asyncio.sleep(86400)  # –ø–æ–≤—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞ (86400 —Å–µ–∫—É–Ω–¥—ã)


# asyncio.get_running_loop().create_task(send_dod())
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞

if __name__ == "__main__":
    asyncio.run(main())
