from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from env import *

events_kb = InlineKeyboardMarkup(inline_keyboard=[], resize_keyboard = True)

for i in inline_kbs['events']:
    events_kb.inline_keyboard.append([InlineKeyboardButton(text=i['header'], callback_data=f"generic_{i['key']}")])

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
startkb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='–ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç üìå')],
    [KeyboardButton(text='–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–∞—Ä—Ç üó∫')],
    [KeyboardButton(text='–ù–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏ ‚úâ')],
    [KeyboardButton(text='–ü—Ä–æ–≥—Ä–∞–º–º–∞ –î–û–î üìÑ')]
], resize_keyboard=True)

emptyfieldkb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='-')]
], resize_keyboard=True)

builder = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="VK", url="https://vk.com/mospolynavigation")],
    [InlineKeyboardButton(text="Telegram", url="https://t.me/mospolynavigation")]
], resize_keyboard=True)

cancel_menu = InlineKeyboardMarkup(inline_keyboard = [
    [InlineKeyboardButton(text = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–∏–µ", callback_data = "cancel_action")]
], resize_keyboard = True)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞
def load_data():
    with open('kb.json', 'r', encoding='utf-8-sig') as f:
        return json.load(f)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON-—Ñ–∞–π–ª
def save_data(data):
    with open('kb.json', 'w', encoding='utf-8-sig') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def find_button_by_key(data, key):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π —Å–ª–æ–≤–∞—Ä—å (–∏–ª–∏ –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã) –Ω—É–∂–Ω—ã–π –∫–ª—é—á
    if isinstance(data, dict):
        if "key" in data and data["key"] == key:
            return data
        # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –∏—â–µ–º –≤ –Ω–∏—Ö
        if "inner_kb" in data:
            return find_button_by_key(data["inner_kb"], key)
    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç
    elif isinstance(data, list):
        for item in data:
            result = find_button_by_key(item, key)
            if result:
                return result
    # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
    return None

def add_button(data, target_key, new_button):
    if isinstance(data, dict):
        if target_key == "root":
            data.update(new_button)
            return True
        if "key" in data and data["key"] == target_key:
            if "inner_kb" in data:
                data["inner_kb"].append(new_button)
                return True
            else:
                data["inner_kb"] = [new_button]
                return True
        if "inner_kb" in data:
            return add_button(data["inner_kb"], target_key, new_button)
    elif isinstance(data, list):
        for item in data:
            if add_button(item, target_key, new_button):
                return True
    return False

def delete_button(data, target_key):
    if isinstance(data, dict):
        if "key" in data and data["key"] == target_key:
            return True
        if "inner_kb" in data:
            data["inner_kb"] = [item for item in data["inner_kb"] if not delete_button(item, target_key)]
            return False  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç
    elif isinstance(data, list):
        new_data = []
        for item in data:
            if not delete_button(item, target_key):
                new_data.append(item)
        data.clear()
        data.extend(new_data)
        return True
    return False